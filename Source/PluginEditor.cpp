/*
==============================================================================

This file was auto-generated by the Introjucer!

It contains the basic framework code for a JUCE plugin editor.

==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
ConvolutionReverbAudioProcessorEditor::ConvolutionReverbAudioProcessorEditor(ConvolutionReverbAudioProcessor& p)
	: AudioProcessorEditor(&p), processor(p)
{
	// Make sure that before the constructor has finished, you've set the
	// editor's size to whatever you need it to be.
	setSize(470, 200);
	addAndMakeVisible(knob1 = new Slider("Knob - 1"));
	addAndMakeVisible(knob2 = new Slider("Knob - 2"));
	addAndMakeVisible(knob3 = new Slider("Knob - 3"));
	addAndMakeVisible(knob4 = new Slider("Knob - 4"));
	addAndMakeVisible(knob5 = new Slider("Knob - 5"));
	addAndMakeVisible(button1 = new TextButton("new button"));
	
	//knob1 // Gain 
	knob1->setRange(0.0, 100.0);
	knob1->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
	knob1->setTextValueSuffix(" %");
	knob1->setSliderStyle(Slider::Rotary);
	knob1->setColour(Slider::rotarySliderFillColourId, Colours::black);
	knob1->setColour(Slider::rotarySliderOutlineColourId, Colours::black);
	knob1->addListener(this);
	knob1->setValue(100.0, sendNotification);
	knob1->setBounds(10, 90, 90, 90);

	//knob 2 //this is the delay amount (m_fDelay_ms)
	knob2->setRange(0.0, 500.0);
	knob2->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
	knob2->setTextValueSuffix(" ms");
	knob2->setSliderStyle(Slider::Rotary);
	knob2->setColour(Slider::rotarySliderFillColourId, Colours::black);
	knob2->setColour(Slider::rotarySliderOutlineColourId, Colours::black);
	knob2->addListener(this);
	knob2->setBounds(100, 90, 90, 90);

	//knob3 // Feedback Amount (m_f_FeedBack_pct)
	knob3->setRange(0.0, 100.0);
	knob3->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
	knob3->setTextValueSuffix(" %");
	knob3->setSliderStyle(Slider::Rotary);
	knob3->setColour(Slider::rotarySliderFillColourId, Colours::black);
	knob3->setColour(Slider::rotarySliderOutlineColourId, Colours::black);
	knob3->addListener(this);
	knob3->setBounds(190, 90, 90, 90);

	//knob4 // Reverberation Time (ms)
	knob4->setRange(0.0, 1000.0);
	knob4->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
	knob4->setTextValueSuffix(" ms");
	knob4->setSliderStyle(Slider::Rotary);
	knob4->setColour(Slider::rotarySliderFillColourId, Colours::black);
	knob4->setColour(Slider::rotarySliderOutlineColourId, Colours::black);
	knob4->addListener(this);
	knob4->setBounds(280, 90, 90, 90);

	//knob5  // this is wet / dry (m_f_WetLevel_pct)
	knob5->setRange(0.0, 100.0);
	knob5->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 15);
	knob5->setTextValueSuffix(" %");
	knob5->setSliderStyle(Slider::Rotary);
	knob5->setColour(Slider::rotarySliderFillColourId, Colours::black);
	knob5->setColour(Slider::rotarySliderOutlineColourId, Colours::black);
	knob5->addListener(this);
	knob5->setBounds(370, 90, 90, 90);

	//button // Impulse Response menu
    button1->setButtonText("Open Impulse Response");
    button1->addListener(this);
	button1->setBounds(180, 20, 120, 20);


	startTimer(50);
}

ConvolutionReverbAudioProcessorEditor::~ConvolutionReverbAudioProcessorEditor()
{
	knob1 = nullptr;
	knob2 = nullptr;
	knob3 = nullptr;
	knob4 = nullptr;
	knob5 = nullptr;
	button1 = nullptr;
}

//==============================================================================
void ConvolutionReverbAudioProcessorEditor::paint(Graphics& g)
{
	g.fillAll(Colours::orange);
	g.setColour(Colours::black);
	g.setFont(Font("Arial", 13, Font::bold + Font::italic));
	//knob text
	g.drawSingleLineText("Gain", 42, 80); //this is knob 1
	g.drawSingleLineText("Pre-Delay", 120, 80); //this is knob 2
	g.drawSingleLineText("Feedback", 211, 80); //this is knob 3
	g.drawSingleLineText("Reverb Time", 295, 80); //this is knob 4
	g.drawSingleLineText("Dry / Wet", 393, 80); //this is knob 4
}

void ConvolutionReverbAudioProcessorEditor::timerCallback()
{
	knob1->setValue(processor.getParameter(ConvolutionReverbAudioProcessor::knob1Param), NotificationType::dontSendNotification);
	knob2->setValue(processor.getParameter(ConvolutionReverbAudioProcessor::knob2Param), NotificationType::dontSendNotification);
	knob3->setValue(processor.getParameter(ConvolutionReverbAudioProcessor::knob3Param), NotificationType::dontSendNotification);
	knob4->setValue(processor.getParameter(ConvolutionReverbAudioProcessor::knob4Param), NotificationType::dontSendNotification);
	knob5->setValue(processor.getParameter(ConvolutionReverbAudioProcessor::knob5Param), NotificationType::dontSendNotification);
}

void ConvolutionReverbAudioProcessorEditor::sliderValueChanged(Slider* sliderThatWasChanged)
{
	if (sliderThatWasChanged == knob1)
	{
		processor.setParameterNotifyingHost(ConvolutionReverbAudioProcessor::knob1Param, (float)knob1->getValue());
	}
	else if (sliderThatWasChanged == knob2)
	{
		processor.setParameterNotifyingHost(ConvolutionReverbAudioProcessor::knob2Param, (float)knob2->getValue());
	}
	else if (sliderThatWasChanged == knob3)
	{
		processor.setParameterNotifyingHost(ConvolutionReverbAudioProcessor::knob3Param, (float)knob3->getValue());
	}
	else if (sliderThatWasChanged == knob4)
	{
		processor.setParameterNotifyingHost(ConvolutionReverbAudioProcessor::knob4Param, (float)knob4->getValue());
	}
	else if (sliderThatWasChanged == knob5)
	{
		processor.setParameterNotifyingHost(ConvolutionReverbAudioProcessor::knob5Param, (float)knob5->getValue());
	}
}

void ConvolutionReverbAudioProcessorEditor::buttonClicked(Button* button)
{
    processor.buttonClicked();
}